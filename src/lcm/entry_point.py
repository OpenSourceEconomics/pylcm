from __future__ import annotations

import warnings
from collections.abc import Callable
from functools import partial
from typing import TYPE_CHECKING, Literal

import pandas as pd

from lcm.interfaces import StateSpaceInfo
from lcm.typing import ParamsDict

if TYPE_CHECKING:
    from collections.abc import Callable

    import pandas as pd
    from jax import Array

    from lcm.typing import (
        ParamsDict,
    )
    from lcm.user_model import Model


def get_lcm_function(
    model: Model,
    *,
    targets: Literal["solve", "simulate", "solve_and_simulate"],
    debug_mode: bool = True,
    # Deprecated arguments (these are now set model)
    jit: bool = True,  # noqa: ARG001
) -> tuple[Callable[..., dict[int, Array] | pd.DataFrame], ParamsDict]:
    """Entry point for users to get high level functions generated by lcm.

    .. deprecated::
        This function is deprecated. Use Model.solve(), Model.simulate(),
        or Model.solve_and_simulate() methods directly instead.

    Return the function to solve and/or simulate a model along with a template for the
    parameters.

    Advanced users might want to use lower level functions instead, but can read the
    source code of this function to see how the lower level components are meant to be
    used.

    Args:
        model: User model specification.
        targets: The requested function types. Currently only "solve", "simulate" and
            "solve_and_simulate" are supported.
        debug_mode: Whether to log debug messages.
        jit: Whether to jit the internal functions. Ignored - JIT is now controlled
            by model.enable_jit parameter.

    Returns:
        - A function that can be used to solve and/or simulate the model (see below).
        - A dictionary with the parameters that the function expects.

        For targets = "solve":
        ----------------------
        A function that takes params and returns the solution of the model, that is, a
        dictionary mapping model period to the respective value function array.

        For targets = "simulate":
        -------------------------
        A function that takes params, a dictionary of initial states, and a model
        solution in form of a value function array, and returns the simulated
        trajectories in a pandas DataFrame, where the multi-index is the combination of
        period and initial-state-ID, and the columns are the optimal actions.

        For targets = "solve_and_simulate":
        -----------------------------------
        The same as targets = "simulate", but with the solution step partialled in, such
        that the function does not require the solution as an argument.

    """
    msg = (
        "get_lcm_function() is deprecated and will be removed in version 0.1.0. "
        "Use Model.solve(), Model.simulate(), or Model.solve_and_simulate() "
        "methods directly instead."
    )
    warnings.warn(
        msg,
        DeprecationWarning,
        stacklevel=2,
    )

    if targets not in {"solve", "simulate", "solve_and_simulate"}:
        raise NotImplementedError(f"Target '{targets}' not supported")

    fn = partial(getattr(model, targets), debug_mode=debug_mode)
    return fn, model.params_template


LastPeriodsNextStateSpaceInfo = StateSpaceInfo(
    states_names=(),
    discrete_states={},
    continuous_states={},
)
